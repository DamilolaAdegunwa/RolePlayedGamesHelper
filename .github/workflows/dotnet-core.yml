name: "Semantic tag release"

on:
  push:
    branches:
      - master
      - pre/rc
      - develop
      - feature/**
      - hotfix/**
      - release/**
jobs:
  semantic-version:
    name: "Publish to Github Package Registry"
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.semantic.outputs.new_release_published }}
      output2: ${{ steps.semantic.outputs.new_release_version }}
    steps: 
      - name: Checkout
        uses: actions/checkout@v1     
      - name: Set Git env
        uses: allenevans/set-env@v1.0.0
        with:
          overwrite: true
          GITHUB_TOKEN: ${{secrets.GIT_ARTIFACT_TOKEN}}
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          always-auth: true
          node-version: 12
        env:
          CI: true
      - name: Install dependencies
        run: npm ci --unsafe-perm 
      - name: check
        run: ls
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2
        id: semantic 
      - name: Do something when a new release published
        #if: publish.steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo "::set-output  name=isPublished::${{ steps.semantic.outputs.new_release_published }}
          echo "::set-output  name=newReleaseVersion::${{ steps.semantic.outputs.new_release_version }}
          echo ${{ steps.semantic.outputs.new_release_version }}
          echo ${{ steps.semantic.outputs.new_release_major_version }}
          echo ${{ steps.semantic.outputs.new_release_minor_version }}
          echo ${{ steps.semantic.outputs.new_release_patch_version }}
  release:
    needs: [semantic-version]
   # if:  ${{ needs.semantic-version.outputs.output1 == 'true' }} 
    runs-on: ubuntu-latest #windows-latest
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true     
      GITHUB_TOKEN: ${{secrets.GIT_ARTIFACT_TOKEN}}
      AZURE_ARTIFACTS_PAT: ${{secrets.AZURE_ARTIFACTS_PAT}}
      NUGET_VERSION: ${{ needs.semantic-version.outputs.output2 }}
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          "MSSQL_PID": "Express"
          "ACCEPT_EULA": "Y"
          "SA_PASSWORD": "MyPassword!"
        ports:
          - 1433:1433
    steps:
      - run: echo ${{needs.semantic-version.outputs.output1}} ${{needs.semantic-version.outputs.output2}} 
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.x
      - name: Update nuget sources
        run: nuget sources update -Name "BoardGamesArtifacts" -Username 'Siarhei Linkevich' -Password ${{secrets.AZURE_ARTIFACTS_PAT}}
      - name: Install dependencies
        run: |
          dotnet restore 
          dotnet tool restore
      - name: Echo version
        run: echo $env:NUGET_VERSION
      - name: Build
        run: dotnet build  --configuration Release --no-restore /p:Version=${{needs.semantic-version.outputs.output2}}
      - name: Test
        env:
          mssql: "Data Source=sql,1433;Initial Catalog=Test;User=sa;Password=Passw0rd!;"          
        run: dotnet test --configuration Release --no-build --nologo --verbosity normal --collect:"XPlat Code Coverage"
      - uses: codecov/codecov-action@v1
      - name: Publish windows version
        run: dotnet nuget push .\Nugets\* --source "BoardGamesArtifacts" --api-key whatever --skip-duplicate
      - uses: actions/upload-artifact@v2
        with:
          path: Nugets/*
